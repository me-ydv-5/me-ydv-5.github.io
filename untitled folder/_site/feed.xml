<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The Contented Scribbler</title>
    <description>This is a webpage by some random guy with zero regrets and few stories to tell. Legend has it that the page  will dispense happiness as you stare in your screen for continuous 10 minutes. Believe me, Trump never lies and I never kid.
</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 30 Oct 2019 02:48:48 +0530</pubDate>
    <lastBuildDate>Wed, 30 Oct 2019 02:48:48 +0530</lastBuildDate>
    <generator>Jekyll v4.0.0</generator>
    
    	
    
    	
    
    	
	      <item>
	        <title>GSoC Summary</title>
	        <description>&lt;h1 id=&quot;octave-code-sharing&quot;&gt;Octave Code Sharing&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;UPDATE&lt;/strong&gt;: This post can actually be seen in the &lt;a href=&quot;https://bitbucket.org/me_ydv_5/octave/wiki/Home&quot;&gt;project wiki&lt;/a&gt; as well. I forgot to push it on github.io.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;#code&quot;&gt;CLICK HERE&lt;/a&gt; TO VIEW THE ACTUAL CODE CHANGES.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now that the coding period has finally ended, I’m happy to share the summary of my project.&lt;/p&gt;

&lt;p&gt;My project was Octave Code Sharing. As the name suggests, it mainly focused (the first half of the project) on “sharing” the Octave code. The intended design was, the user should be able to push their octave script onto &lt;a href=&quot;https://wiki.octave.org&quot;&gt;wiki.octave.org&lt;/a&gt; for others to use and see.&lt;/p&gt;

&lt;p&gt;For this, I needed a script to produce the script in a format that is acceptable by MediaWiki. My mentor had already done this bit by implementing the &lt;a href=&quot;https://bitbucket.org/me_ydv_5/octave/src/default/scripts/miscellaneous/publish__.m&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;publish&lt;/code&gt;&lt;/a&gt; function. What this does is, it takes the user script and converts it to the prescribed format (if available), by default being &lt;code class=&quot;highlighter-rouge&quot;&gt;html&lt;/code&gt;. So to convert it to wiki format, we needed &lt;a href=&quot;https://bitbucket.org/me_ydv_5/octave/src/ocs/scripts/miscellaneous/private/__publish_wiki_output__.m&quot;&gt;__publish_wiki_output__.m&lt;/a&gt;, which I refactored a bit. This file is responsible for producing the wiki output. &lt;code class=&quot;highlighter-rouge&quot;&gt;publish&lt;/code&gt; is used to parse the script file. After this, the main task was to find a way to upload the formatted file to the wiki server. An excellent reference point for getting started with this was &lt;a href=&quot;https://github.com/octave-de/OctConf2017/blob/master/demo2/wikiLogin.sh&quot;&gt;this script&lt;/a&gt;. The script was written by the mentor as a bash script. So, I had to convert this script into an Octave counterpart so that we won’t need to execute third party code (bash script in this case) to transfer the content of the file to the wiki server.&lt;/p&gt;

&lt;p&gt;Because the backend of Octave is mostly C++, I needed to use &lt;a href=&quot;https://curl.haxx.se/libcurl/&quot;&gt;libcurl&lt;/a&gt; library to perform the actual transfer, because Octave does not have its own implementation of such a library and many other areas of the software use libcurl as well.&lt;/p&gt;

&lt;p&gt;The workflow is like this:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Input the script, user’s password and username to &lt;a href=&quot;https://bitbucket.org/me_ydv_5/octave/src/default/scripts/miscellaneous/publish_to_wiki.m&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;publish_to_wiki&lt;/code&gt;&lt;/a&gt; function, which converts the script to wiki format using &lt;code class=&quot;highlighter-rouge&quot;&gt;publish&lt;/code&gt; function internally and saves the output file to a directory named &lt;code class=&quot;highlighter-rouge&quot;&gt;html&lt;/code&gt; (analogous to MATLAB).&lt;/li&gt;
  &lt;li&gt;The same function then picks out the figures from the script, if any.&lt;/li&gt;
  &lt;li&gt;Then it inputs the figures, formatted output file content and credentials to &lt;a href=&quot;https://bitbucket.org/me_ydv_5/octave/src/default/scripts/miscellaneous/wiki_upload.m&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;wiki_upload&lt;/code&gt;&lt;/a&gt; script.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;wiki_upload&lt;/code&gt; script then establishes the connection with the wiki server by asking for a login token.&lt;/li&gt;
  &lt;li&gt;It stores the cookies in a temporary file.&lt;/li&gt;
  &lt;li&gt;CSRF Login is then performed to the wiki server and an edit token (for editing a page) is obtained.&lt;/li&gt;
  &lt;li&gt;The wiki formatted output file from &lt;code class=&quot;highlighter-rouge&quot;&gt;publish&lt;/code&gt; is then uploaded to the server.&lt;/li&gt;
  &lt;li&gt;Figures are uploaded at last, with proper verification such that it doesn’t upload a particular figure if it alreadty exists on the server.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To test yourself, you may want to use the following command:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;publish_to_wiki (&quot;script_file&quot;, &quot;username&quot;, &quot;password&quot;)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This should place your script on a URL similar to &lt;code class=&quot;highlighter-rouge&quot;&gt;https://wiki.octave.org/script_file&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;An already performed example of this is, when I tried to publish a script named &lt;a href=&quot;https://github.com/octave-de/OctConf2017/blob/master/demo2/intro.m&quot;&gt;intro.m&lt;/a&gt; on the &lt;a href=&quot;https://wiki.octave.space&quot;&gt;test wiki server&lt;/a&gt; set up by the mentor.
I used the command,&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;publish_to_wiki(&quot;intro&quot;, &quot;myUserName&quot;, &quot;myPassword&quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;and I got &lt;a href=&quot;https://wiki.octave.space/index.php/Intro&quot;&gt;this page&lt;/a&gt; as the result. This page has &lt;em&gt;not&lt;/em&gt; been written manually on the server, rather its all about the function.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;An important point in this process is the storing of cookies, which was performed by libcurl and set up in &lt;a href=&quot;https://bitbucket.org/me_ydv_5/octave/src/aa660b7dcae72a2e769ecbfe71b56c86012ca2db/liboctave/util/url-transfer.h#lines-158&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;liboctave/url-transfer.h&lt;/code&gt;&lt;/a&gt;. The most challenging part in this part of the project was to figure out the uploading of figures, which I was able to do in a week or so. This needed me to read a lot of documentation and codes. Finally, the figures were uploaded using the &lt;a href=&quot;https://bitbucket.org/me_ydv_5/octave/src/aa660b7dcae72a2e769ecbfe71b56c86012ca2db/liboctave/util/url-transfer.cc#lines-721&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;form_data_post&lt;/code&gt;&lt;/a&gt; function.&lt;/p&gt;

&lt;p&gt;This was the first half part of the project.&lt;/p&gt;

&lt;p&gt;Next was implementing the MATLAB compatible &lt;a href=&quot;https://github.com/octave-de/octave-web#the-intended-design&quot;&gt;RESTful services for Octave&lt;/a&gt;. The project included implementing the &lt;a href=&quot;https://bitbucket.org/me_ydv_5/octave/src/ocs/scripts/web/weboptions.m&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;weboptions&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://bitbucket.org/me_ydv_5/octave/src/ocs/scripts/web/webread.m&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;webread&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://bitbucket.org/me_ydv_5/octave/src/ocs/scripts/web/webwrite.m&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;webwrite&lt;/code&gt;&lt;/a&gt; functions. Other implementations of the suite will be followed in post GSoC work.&lt;/p&gt;

&lt;p&gt;In this part of the project, working on &lt;code class=&quot;highlighter-rouge&quot;&gt;weboptions&lt;/code&gt; was very fun. I got to learn a lot about the internal processing of function files and how Octave uses handle classes to cater the needs of user defined classes. Also, the way getters and setters work is really nice, even though there is still space for Classdef in octave.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;weboptions&lt;/code&gt; is used to put header fields in the other two functions.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;webwrite&lt;/code&gt; is used to POST something to a URI. It can also take a weboptions object as an argument to amend the header fields.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;webread&lt;/code&gt; is used to GET something from a URI. It also accepts weboptions object as an input.&lt;/p&gt;

&lt;p&gt;You can refer to the help text of the functions to know more about them. A few of the weboptions’ options are not yet implemented, which are explicitly listed in its help text, after discussion with mentor, so they won’t work with webwrite and webread either.&lt;/p&gt;

&lt;p&gt;The challenging part in this part of the project was, passing the weboptions object from the octave script function to the C++ backend and then performing the required operations on them. These functions, too, use &lt;code class=&quot;highlighter-rouge&quot;&gt;libcurl&lt;/code&gt; for sending HTTP requests.&lt;/p&gt;

&lt;p&gt;All the goals of the project were met. There were times when I was unable to get the thing done, be it trivial or not, but with continuous lookup and exploring, I was able to get them done. Sometimes, there are reasons that are out of your reach, like the sudden power failures that I encountered in my machine during the last phase. So, Kai, my mentor, being at his best, understood the concern and extended the weekly plan by a couple of days after I requested. I had also implemented a &lt;a href=&quot;https://bitbucket.org/me_ydv_5/server_code&quot;&gt;test server&lt;/a&gt; in java for GET and POST request only to find a week later that there’s one easy alternative of &lt;a href=&quot;https://httpbin.org/get&quot;&gt;https://httpbin.org/get&lt;/a&gt; and &lt;a href=&quot;https://httpbin.org/post&quot;&gt;https://httpbin.org/post&lt;/a&gt;, respectively.&lt;/p&gt;

&lt;h2 id=&quot;further-work-after-gsoc-is-over&quot;&gt;Further work after GSoC is over.&lt;/h2&gt;

&lt;p&gt;As for the &lt;code class=&quot;highlighter-rouge&quot;&gt;publish_to_wiki&lt;/code&gt; function, all the tests that I did were as desired, however if any error is reported it will be sorted out then and there.&lt;/p&gt;

&lt;p&gt;There are a few options left in the &lt;code class=&quot;highlighter-rouge&quot;&gt;weboptions&lt;/code&gt; which are not currently implemented (this was intended). It would be extended as well using &lt;code class=&quot;highlighter-rouge&quot;&gt;jsonencode&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;jsondecode&lt;/code&gt;, essential for the next round of renovation in this function.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;webwrite&lt;/code&gt; works pretty good in case of sending HTTP requests in text form, but it is still unable to resolve a query list of JSON form. That is one thing that’s on my to-dos.&lt;/p&gt;

&lt;p&gt;I’m currently trying to polish &lt;code class=&quot;highlighter-rouge&quot;&gt;webread&lt;/code&gt;, although it is in workable state, but still there’s space for some improvement. For example, when I try to GET an image from a URI, I am unable to decode the binary data from the output stream to convert it to an image. So this is what I’ve been working on currently.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;The period between the start of the second phase and mid of the third phase were really fruitful. I had challenges to solve and that’s when I got adrenaline rushes many times.&lt;/p&gt;

&lt;p&gt;All in all, the project was very exciting, as opposed to my initial impression, where I thought it to be a web development project and using HTML/CSS and all. I really learned, not only about Octave and its codebase but also many more things like, bitbucket, libcurl, MediaWiki, etc. to name a few. I also learned to manage things on time. This was one of the greatest perks of doing the GSoC.&lt;/p&gt;

&lt;p&gt;Needless to say, this all happened with the help of my supportive and understanding mentor, Kai, who timely synced up with me, even though I used to hear from my peers that their mentor doesn’t respond timely, etc. He always appreciated my efforts and had a sound idea of what task would take what duration. He also expressed his unsatisfaction at some time, which really gave me a boost to perform better. And not to forget the little things that he noticed, like checking out which student has been putting regular posts on planet octave, etc. I’ll always be thankful to him for selecting me for GSoC. Also, I’m thankful to jwe, for introducing such a cool software, that too at no cost. The list may go on without a stop, but my heatiest thanks to all the maintainers and mentors who helped me bring the best out of myself. I’ll want to keep working with Octave community in future as well!&lt;/p&gt;

&lt;p&gt;To a great “codeful” summer, 2018!&lt;/p&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;code&quot;&gt;CODE&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://bitbucket.org/me_ydv_5/octave/branches/compare/ocs%0D%40#diff&quot;&gt;Complete diff&lt;/a&gt; of the work done in the project.&lt;/p&gt;

&lt;p&gt;Commit to the first half part, Octave code sharing - &lt;a href=&quot;https://bitbucket.org/me_ydv_5/octave/commits/a5b41a9dcf6979c39953f8770b87cbadc23a08cd&quot;&gt;a5b41a9&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Commit to the second half part, RESTful services - &lt;a href=&quot;https://bitbucket.org/me_ydv_5/octave/commits/a5e8a2f640ac4bc398be655ecfcd4336ca82f89c&quot;&gt;a5e8a2f&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;The bookmark ‘ocs’ is for GSoC project.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://bitbucket.org/me_ydv_5/octave/commits/branch/ocs&quot;&gt;Link&lt;/a&gt; to BitBucket repo.&lt;/p&gt;
</description>
	        <pubDate>Tue, 07 Aug 2018 17:48:00 +0530</pubDate>
	        <link>http://localhost:4000/gsoc2018/summary</link>
	        <guid isPermaLink="true">http://localhost:4000/gsoc2018/summary</guid>
	        
	        
	        <category>jekyll</category>
	        
	        <category>update</category>
	        
	      </item>
	    
    
    	
	      <item>
	        <title>Week 15</title>
	        <description>&lt;p&gt;With the last week of GSoC arriving, I’m also in a position to wrap up the project. This week I’m focusing on thorough testing, documentation and other code optimizations. I’ve already refactored the existing code of third evaluations a bit in two different drives. In those, I’ve made the same internal function for setting up various cURL options for webread and webwrite functions. Also I’ve reduced a significant lines of code as well in some files, because I believe writing quality and useful code is better than writing quantity and useless code, as was suggested by Kai as well in early days of the project.&lt;/p&gt;

&lt;p&gt;I’ve also implemented &lt;a href=&quot;https://bitbucket.org/me_ydv_5/octave/commits/026e8e95e076a63fe37706eae19e0b60648545f5#chg-scripts/miscellaneous/webread.m&quot;&gt;webread&lt;/a&gt; function the previous week.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&quot;https://bitbucket.org/me_ydv_5/octave/commits/branch/ocs&quot;&gt;Link&lt;/a&gt; to BitBucket repo.&lt;/p&gt;
</description>
	        <pubDate>Sun, 29 Jul 2018 18:08:00 +0530</pubDate>
	        <link>http://localhost:4000/gsoc2018/week15</link>
	        <guid isPermaLink="true">http://localhost:4000/gsoc2018/week15</guid>
	        
	        
	        <category>jekyll</category>
	        
	        <category>update</category>
	        
	      </item>
	    
    
    	
	      <item>
	        <title>Week 13 &amp; 14</title>
	        <description>&lt;p&gt;&lt;strong&gt;UPDATE 2:&lt;/strong&gt; I found the cause of the &lt;code class=&quot;highlighter-rouge&quot;&gt;urlread&lt;/code&gt; function not working correctly. It’s because curl sends the request as &lt;code class=&quot;highlighter-rouge&quot;&gt;application/x-www-form-urlencoded&lt;/code&gt; whereas it should be &lt;code class=&quot;highlighter-rouge&quot;&gt;application/json&lt;/code&gt;, which is explicitly changed in the cURL request that I’ve written down. I think this could be solved using the &lt;code class=&quot;highlighter-rouge&quot;&gt;webwrite&lt;/code&gt; function that I’ve written.&lt;/p&gt;

&lt;p&gt;Now coming to the project work, I’ve been wandering inside the codebase for the last three days to implement the &lt;code class=&quot;highlighter-rouge&quot;&gt;webwrite&lt;/code&gt; function. This is what I’ve implemented as &lt;a href=&quot;https://bitbucket.org/me_ydv_5/octave/src/default/scripts/miscellaneous/webwrite.m&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;webwrite.m&lt;/code&gt;&lt;/a&gt;. It takes input and arranges them for further processing in currently what we call as &lt;a href=&quot;https://bitbucket.org/me_ydv_5/octave/src/7b22a241cd5e265c323376b935e78d8182155dde/libinterp/corefcn/urlwrite.cc#lines-839&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;__internal__&lt;/code&gt;&lt;/a&gt; function. A sudden question could be why two different, so this is because the processing of the input is easier in Octave than in C++ and we really need to work with cURL here so C++ cannot be sidelined. MATLAB can take the following as a string with 42 as a number &lt;code class=&quot;highlighter-rouge&quot;&gt;str = [&quot;His&quot;, &quot;age&quot;, &quot;is&quot;, 42]&lt;/code&gt; whereas in Octave, we get the ascii value corresponding to 42 in its place. This is one difference what I observed. Due to this, I’m asking users to pass strings all along, without any numbers. But I’m not sure how I can test above &lt;code class=&quot;highlighter-rouge&quot;&gt;str&lt;/code&gt; if it contains a number, so that I could warn/error the user that what he entered is not what Octave will get as. See this &lt;a href=&quot;https://bitbucket.org/me_ydv_5/octave/src/7b22a241cd5e265c323376b935e78d8182155dde/scripts/miscellaneous/webwrite.m#lines-62&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FIXME&lt;/code&gt;&lt;/a&gt;. And earlier I was sending a flag if the user has supplied some weboptions or not, but now if they haven’t, I’m supplying the default weboptions object, afterall it’s good to use your code when you’ve put some time to write it!&lt;/p&gt;

&lt;p&gt;Coming to the &lt;a href=&quot;https://bitbucket.org/me_ydv_5/octave/src/7b22a241cd5e265c323376b935e78d8182155dde/libinterp/corefcn/urlwrite.cc#lines-839&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;__internal__&lt;/code&gt;&lt;/a&gt; function, this took my most of the time. I’d like to explicitly write two lines of code here, even if you do not understand them, kindly read them.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  octave_classdef *obj = args(nargin-1).classdef_object_value ();
  cdef_object object = obj -&amp;gt; get_object ();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;These two lines look small, but took my most time and I was happiest when I got these working. This takes the weboptions object supplied from the m-script and gives us the C++ equivalent. I wrote this here just for my satisfaction anyway. The supposed working is, unpack the object and send the contents to an internal function to set the cURL headers which need to be amended. I was first trying to use &lt;a href=&quot;http://octave.org/doxygen/4.0/d4/d6c/classcdef__object.html#a1e1f017e8766d4c475b9b74aca0f767b&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;map_value ()&lt;/code&gt;&lt;/a&gt; function of the &lt;code class=&quot;highlighter-rouge&quot;&gt;cdef_object&lt;/code&gt; which essentially, maps the Keys (as strings) to their values (as &lt;code class=&quot;highlighter-rouge&quot;&gt;cdef_property&lt;/code&gt;), see &lt;a href=&quot;https://hg.savannah.gnu.org/hgweb/octave/file/74fbe0d91994/libinterp/octave-value/ov-classdef.cc#l1234&quot;&gt;this&lt;/a&gt; but because this always gives a &lt;a href=&quot;https://hg.savannah.gnu.org/hgweb/octave/file/74fbe0d91994/libinterp/octave-value/ov-classdef.cc#l1238&quot;&gt;warning&lt;/a&gt;, which is right, I refrained from using it because employing this in a function will decrease the UX quality of the software. Instead, I extracted Keys as strings and then queried their values. To get away with the warinings, I excluded &lt;a href=&quot;https://bitbucket.org/me_ydv_5/octave/src/7b22a241cd5e265c323376b935e78d8182155dde/libinterp/corefcn/urlwrite.cc#lines-897&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;two Keys&lt;/code&gt;&lt;/a&gt; (“delete” and “display”) for now. But this is a bad design because although there won’t be any such keys in a weboptions object, but still we should be handling it some other way, currently which I do not know, I’ll ask Kai or jwe about this.&lt;/p&gt;

&lt;p&gt;The other thing that I just got to think was, I’m unpacking the object in &lt;code class=&quot;highlighter-rouge&quot;&gt;__internal__&lt;/code&gt; function, and then sending it to some other function. Why not just send the object there and unpack it there? Reducing a lot of lines of code? To unpack, I wrote an equivalent &lt;a href=&quot;https://bitbucket.org/me_ydv_5/octave/src/7b22a241cd5e265c323376b935e78d8182155dde/liboctave/util/url-transfer.h#lines-44&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;struct&lt;/code&gt;&lt;/a&gt; and then I’m passing this to &lt;a href=&quot;https://bitbucket.org/me_ydv_5/octave/src/7b22a241cd5e265c323376b935e78d8182155dde/liboctave/util/url-transfer.cc#lines-752&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;set_weboptions&lt;/code&gt;&lt;/a&gt; function, which then puts the corresponding options in cURL. I’ll change this to simpler format so that we won’t need struct. There are a few &lt;code class=&quot;highlighter-rouge&quot;&gt;FIXME&lt;/code&gt; tags in this function for which I’ll need the help of mentor and other maintainers. For example, I searched the code to find how to push back values in an &lt;code class=&quot;highlighter-rouge&quot;&gt;Array&amp;lt;std::string&amp;gt;&lt;/code&gt;, but couldn’t find it out. This will save us a lot of time because now that I know how Classdef’s API work in C++.&lt;/p&gt;

&lt;p&gt;I also changed &lt;a href=&quot;https://bitbucket.org/me_ydv_5/octave/src/7b22a241cd5e265c323376b935e78d8182155dde/liboctave/util/url-transfer.cc#lines-645&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;http_action&lt;/code&gt;&lt;/a&gt; function and completely removed the previous &lt;code class=&quot;highlighter-rouge&quot;&gt;http_get&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;http_post&lt;/code&gt; functions to accomodate new HTTP methods like &lt;code class=&quot;highlighter-rouge&quot;&gt;DELETE&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;PUT&lt;/code&gt;, Kai too had complained about this being a bad design back in phase one, so his query should also have resolved by this. Also the error in this function is not propagated correctly to the interpreter. See the FIXME in the function. Oh, and the function &lt;a href=&quot;https://bitbucket.org/me_ydv_5/octave/src/7b22a241cd5e265c323376b935e78d8182155dde/liboctave/util/url-transfer.cc#lines-704&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;set_header&lt;/code&gt;&lt;/a&gt; that I wrote in phase two can be of good use now in phase three, so that’s good.&lt;/p&gt;

&lt;p&gt;Also, &lt;a href=&quot;http://httpbin.org&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;http://httpbin.org&lt;/code&gt;&lt;/a&gt; is a cool site to throw requests for testing, rendering my server useless. Anyway, I learnt a thing or two about that as well with this.&lt;/p&gt;

&lt;p&gt;A few other small detailings are left which will be cleared as soon as me and Kai meet on the IRC.&lt;/p&gt;

&lt;p&gt;I must say, initially I was over expecting, but Kai correctly saw the depth of the project and resisted me to add more work given that I still spend around 30-35 hours a week to the project (I hope this is not offending anyone!). Writing this function was a great experience. I generally get headache working on laptop, but I could seemlessly work without any long break for around 18 hours a day. Wrapping up this week’s post, I hope someone might reach here reading it. Feel free to suggest/advice me on the work.&lt;/p&gt;

&lt;p&gt;Thanks and have a good time.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;UPDATE:&lt;/strong&gt; There’s some problem with &lt;code class=&quot;highlighter-rouge&quot;&gt;urlread&lt;/code&gt; function in octave when sending post requests. Because my this week’s work is related to the same, I’ll check what exactly is getting wrong. You can try the curl command in the meantime. Also, the server will respond (most probably) at every time form now on.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Hi!&lt;/p&gt;

&lt;p&gt;I’m pleased to tell you all that I’ve got good remarks in second evaluation of GSoC! Kai didn’t complin about what I was lacking in the first evaluation. I’m really thankful to him for this.&lt;/p&gt;

&lt;p&gt;Coming to the next and final phase of the GSoC, I have to implement &lt;a href=&quot;https://in.mathworks.com/help/matlab/ref/webread.html&quot;&gt;webread&lt;/a&gt; and &lt;a href=&quot;https://in.mathworks.com/help/matlab/ref/webwrite.html&quot;&gt;webwrite&lt;/a&gt; functions in Octave. I had some issues with getters and setters in &lt;code class=&quot;highlighter-rouge&quot;&gt;weboptions&lt;/code&gt; which have now been rectified.&lt;/p&gt;

&lt;p&gt;To check the working of the two functions, I needed a server that could entertain HTTP request and let us verify the desired results. For this, I chose &lt;a href=&quot;https://www.playframework.com/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Java Play! Framework&lt;/code&gt;&lt;/a&gt;, which is a super cool tool in JAVA that serves our purpose well. Needless to say, it is RESTful by default. It works on &lt;a href=&quot;https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller&quot;&gt;MVC design pattern&lt;/a&gt;. Without wasting everyone’s time, I’d like to introduce a few files that are relevant to our project.&lt;/p&gt;

&lt;p&gt;The first and the foremost is the &lt;a href=&quot;https://bitbucket.org/me_ydv_5/server_code/src/master/conf/routes&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;routes&lt;/code&gt;&lt;/a&gt; file, which binds our app to the outer world. Routes can also be called as endpoints, if anyone is aware of. We write all the HTTP requests (GET, POST, PUT, etc.) here and map those endpoints to our corresponding functions that take action on the requests. As an example, you can see that GET request to the &lt;code class=&quot;highlighter-rouge&quot;&gt;webhook&lt;/code&gt; endpoint is mapped to &lt;a href=&quot;https://bitbucket.org/me_ydv_5/server_code/src/7da1bc07f3384c270920d705a0e1a44dc12bce32/app/controllers/HomeController.java#lines-30&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;webhookGet()&lt;/code&gt;&lt;/a&gt; function. Similarly, we can write functions as per our need and do the needful.&lt;/p&gt;

&lt;p&gt;Next file is a controller. Controllers are the files that essentially parse/decode your request into smaller pieces and the applies some computation with the help of auxillary functions defined elsewhere. The above mentioned webhookGet() function is what is written in a controller.&lt;/p&gt;

&lt;p&gt;The last one is &lt;code class=&quot;highlighter-rouge&quot;&gt;application.conf&lt;/code&gt; which has all the configurations that are needed to run the project. The server is run using the &lt;code class=&quot;highlighter-rouge&quot;&gt;sbt run&lt;/code&gt; command and shipped for production using &lt;code class=&quot;highlighter-rouge&quot;&gt;sbt dist&lt;/code&gt; command. Only you need to have a JAVA environment to make these command work. You can try to play with it using the source code from &lt;a href=&quot;https://bitbucket.org/me_ydv_5/server_code/src&quot;&gt;here&lt;/a&gt;. Note that the latter command cannot be run on the production server unless you have high memory for it, I myself, do the dist command on my machine and then &lt;code class=&quot;highlighter-rouge&quot;&gt;rsync&lt;/code&gt; the zip file to the server, although there are other easier methods available like using CI server, etc. Kindly feel free to ask me anything related to the framework or anything else related to project, in general.&lt;/p&gt;

&lt;p&gt;Now that the server has been set up, we can hit GET and PUSH requests on it and tweak the behaviour of what happens with our requests as per our need. Currently, the server will behave as an echo server, so it will let you know what you sent.&lt;/p&gt;

&lt;p&gt;To check if the server works as expected for you, you can issue the following command in Octave:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;s = urlread(&quot;https://batterylow.me:9000/webhook&quot;, &quot;get&quot;, {&quot;mode&quot;, &quot;testing&quot;, &quot;verify_token&quot;, &quot;theTokenToAccount&quot;, &quot;message&quot;, &quot;Post back this message to me&quot;})&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The last parameter in the above cell string should be returned to you. Note that &lt;code class=&quot;highlighter-rouge&quot;&gt;mode&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;verify_token&lt;/code&gt; should be &lt;code class=&quot;highlighter-rouge&quot;&gt;testing&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;theTokenToAccount&lt;/code&gt; respectively, because a request only succeeds when the above two pairs match, as you can see in the source code. &lt;strong&gt;Remember to use https protocol&lt;/strong&gt; while sending the request, because it doesn’t accept requests from http (even I spent considerable time on this silly mistake!). You can use curl as well by invoking the following command:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt; curl -H &quot;Content-Type: application/json&quot; -X POST &quot;https://batterylow.me:9000/webhook&quot; -d '{&quot;name&quot;: &quot;yourName&quot;}'&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Ofcourse, you can easily send the above two requests using octave as well like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GET Request:
s = urlread(&quot;https://batterylow.me:9000/webhook&quot;, &quot;get&quot;, {&quot;mode&quot;, &quot;testing&quot;, &quot;verify_token&quot;, &quot;theTokenToAccount&quot;, &quot;message&quot;, &quot;Post back this message to me&quot;})

POST Request:
s = urlread(&quot;https://batterylow.me:9000/webhook&quot;, &quot;post&quot;, {&quot;name&quot;, &quot;yourname&quot;})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;One hurdle for me right now is my system, it keeps crashing! At all unknown times! I’m trying to get it work asap so got late to complete the &lt;code class=&quot;highlighter-rouge&quot;&gt;webread&lt;/code&gt; function. Today as well, I got some space now to write the post. I’ll update this post in a day or two with my implementation details of the function. (I had intimidated Kai about this.)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; You may &lt;em&gt;not&lt;/em&gt; get the response from the server because I myself need to run it on that machine. Kindly let me know on IRC if you need to suggest/advice anything. I’ll definitely reply if my machine might be working and I may be online!&lt;/p&gt;

&lt;p&gt;Till then! :-)&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&quot;https://bitbucket.org/me_ydv_5/octave/commits/branch/ocs&quot;&gt;Link&lt;/a&gt; to BitBucket repo.&lt;/p&gt;
</description>
	        <pubDate>Thu, 19 Jul 2018 21:40:00 +0530</pubDate>
	        <link>http://localhost:4000/gsoc2018/week13-14</link>
	        <guid isPermaLink="true">http://localhost:4000/gsoc2018/week13-14</guid>
	        
	        
	        <category>jekyll</category>
	        
	        <category>update</category>
	        
	      </item>
	    
    
    	
	      <item>
	        <title>Week 12</title>
	        <description>&lt;p&gt;I’ve implemented the &lt;a href=&quot;https://bitbucket.org/me_ydv_5/octave/src/ocs/scripts/miscellaneous/weboptions.m&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;weboptions&lt;/code&gt;&lt;/a&gt; function. I also added relevant comments wherever needed, including the code of first evaluation. This completes the second phase evaluation task, i.e, implementing &lt;code class=&quot;highlighter-rouge&quot;&gt;wiki_upload&lt;/code&gt; script and &lt;code class=&quot;highlighter-rouge&quot;&gt;weboptions&lt;/code&gt;. There was an unprecendented delay of a week when I was trying to upload the images on the server. It would’ve given me a head start if I had completed the task without the delay, although I am still on the track. There’s one thing left, the help text that I wrote for &lt;code class=&quot;highlighter-rouge&quot;&gt;weboptions&lt;/code&gt; isn’t being displayed when I issue &lt;code class=&quot;highlighter-rouge&quot;&gt;help weboptions&lt;/code&gt; because it’s a &lt;code class=&quot;highlighter-rouge&quot;&gt;Classdef&lt;/code&gt; and not &lt;code class=&quot;highlighter-rouge&quot;&gt;function&lt;/code&gt;. Other than this, I feel the task has been executed correctly.&lt;/p&gt;

&lt;p&gt;Coming to the next task, I plan to implement &lt;code class=&quot;highlighter-rouge&quot;&gt;webread&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;webwrite&lt;/code&gt; function with MATLAB compatibilty. I think I can change &lt;code class=&quot;highlighter-rouge&quot;&gt;wiki_upload&lt;/code&gt; script to be a generic one and then use it for both wiki and webwrite. This would help us extend it with any other functionality in the future.&lt;/p&gt;

&lt;p&gt;Note that a few of the &lt;code class=&quot;highlighter-rouge&quot;&gt;weboptions&lt;/code&gt; fields are currently for MATLAB compatibilty, as described in the previous post. Also, second phase evaluation will take place this week. Hoping for not giving Kai a chance to complain! :-)&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&quot;https://bitbucket.org/me_ydv_5/octave/commits/branch/ocs&quot;&gt;Link&lt;/a&gt; to BitBucket repo.&lt;/p&gt;
</description>
	        <pubDate>Mon, 09 Jul 2018 20:32:00 +0530</pubDate>
	        <link>http://localhost:4000/gsoc2018/week12</link>
	        <guid isPermaLink="true">http://localhost:4000/gsoc2018/week12</guid>
	        
	        
	        <category>jekyll</category>
	        
	        <category>update</category>
	        
	      </item>
	    
    
    	
	      <item>
	        <title>Week 11</title>
	        <description>&lt;p&gt;This week I fixed some styling in the previous codebase and other minor issues. Me and Kai had a very fruitful discussion this week for the roadmap ahead. We discussed many things.&lt;/p&gt;

&lt;p&gt;Kai verified that &lt;a href=&quot;https://bitbucket.org/me_ydv_5/octave/src/default/scripts/miscellaneous/wiki_upload.m&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;wiki_upload.m&lt;/code&gt;&lt;/a&gt; (an important dependency for &lt;code class=&quot;highlighter-rouge&quot;&gt;publish_to_wiki.m&lt;/code&gt;) works as expected including the checks for uploading the same image again, wikimedia itself does a hashcheck before uploading and sends an error if the image is identical to the previous one or a warning if the image already exists on the wiki server. You can check this by calling:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;publish_to_wiki (&quot;script&quot;, &quot;username&quot;, &quot;password&quot;)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;where &lt;code class=&quot;highlighter-rouge&quot;&gt;script&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;username&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;password&lt;/code&gt; correspond to the script that you want to publish, your username and password for &lt;a href=&quot;https://wiki.octave.space&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;wiki.octave.space&lt;/code&gt;&lt;/a&gt; (this will be changed to &lt;code class=&quot;highlighter-rouge&quot;&gt;wiki.octave.org&lt;/code&gt; later) respectively. One problem that I noted was Octave hangs up if the connection gets lost in the middle of the transfer. But this is not native to this function, it affects all the files that require to use libcurl’s interface to Octave. Nevertheless, I tried to look into it, with the function &lt;a href=&quot;https://curl.haxx.se/libcurl/c/CURLOPT_TIMEOUT.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CURLOPT_TIMEOUT&lt;/code&gt;&lt;/a&gt; and other, as well. Unfortunately, I couldn’t get a viable answer because the timeout value in the above function is measured from the start of the transfer and &lt;strong&gt;NOT&lt;/strong&gt; when the connection gets lost. So suppose if someone has a large transfer, then setting this value is potentially dangerous because their tansfer will get cancelled in the middle of the process even though the connection is good. Other than this, there were provisions to exit the API if the speed gets below a given threshold. This again cannot be guaranteed because it might be that the user may have a lesser internet speed. So, the idea of resuming Octave was dropped altogether, its again upto the user to get a proper internet connection! Other than this, there was the quest of making test cases for &lt;code class=&quot;highlighter-rouge&quot;&gt;wiki_upload.m&lt;/code&gt; for which I suggested to measure the &lt;code class=&quot;highlighter-rouge&quot;&gt;Content-Length&lt;/code&gt; of the query string that is formed as part of the transfer. This again has problems, because the libcurl API for Octave doesn’t let the developer know the actual query string which is transferred over the connection. FYI, the query string formation takes place &lt;a href=&quot;https://hg.savannah.gnu.org/hgweb/octave/file/7dad5fa7e88e/liboctave/util/url-transfer.cc#l743&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;here&lt;/code&gt;&lt;/a&gt;. This would only add a big overhead for the returned values from the C++ API to the Octave code because all of the functions that use the &lt;code class=&quot;highlighter-rouge&quot;&gt;perform ()&lt;/code&gt; (it actually performs the transfer) function will need to be changed. I initially had suggested this because during debugging I had actually changed the &lt;code class=&quot;highlighter-rouge&quot;&gt;form_query_string&lt;/code&gt; function according to my needs. But then I realised that this is not feasible because:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;As mentioned above, there would be unnecessary overhead to change all the functions because of change in &lt;code class=&quot;highlighter-rouge&quot;&gt;form_query string&lt;/code&gt; function. Also, a number of other already implemented functions use it. So, regression can occur.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We actually cannot measure the actual Content-Length properly, because the content is sent in &lt;em&gt;UTF-8&lt;/em&gt; format which replaces all the non-alphabetical characters with their UTF-8 version. So a whitespace is changed to &lt;code class=&quot;highlighter-rouge&quot;&gt;%20&lt;/code&gt;. Of course there are other ways to measure the UTF values for all the characters by running various for loops and adding offsets to a given values to find another value, etc. But I do not think this is a good measure to test the main working of &lt;em&gt;wiki_upload&lt;/em&gt; which essentially needs to check if the file has been uploaded or not on the wiki.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Will see if there’s anything else I could do about this, else I will need to manually check at various times if the file has been uploaded correctly or not.&lt;/p&gt;

&lt;p&gt;Lastly, the commenting part, which I don’t want to loose marks for, is left and I’ll be doing that in the coming days, before the evaluation so that Kai doesn’t get a chance to bash me on this. ;-)&lt;/p&gt;

&lt;p&gt;&lt;em&gt;THIS COMPLETES THE FIRST HALF OF THE PROJECT, i.e., OCTAVE CODE SHARING.&lt;/em&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Next lined up is, setting up &lt;strong&gt;RESTful web services for Octave&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We had a good discussion over this too. First to be implemented is, &lt;a href=&quot;https://www.mathworks.com/help/matlab/ref/weboptions.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;weboptions&lt;/code&gt;&lt;/a&gt;. I initially thought of implementing it using a &lt;code class=&quot;highlighter-rouge&quot;&gt;struct&lt;/code&gt; in the backend. But then Kai suggested to use &lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Classdef&lt;/code&gt;&lt;/em&gt; in Octave and making an object. Of course, he was right, one simple and foolish reason being, weboptions in MATLAB doesn’t display the &lt;code class=&quot;highlighter-rouge&quot;&gt;Password&lt;/code&gt; field and if &lt;code class=&quot;highlighter-rouge&quot;&gt;struct&lt;/code&gt; is deployed for this, there’s no way that the password is stored in a plain text and displayed as obscured.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://bitbucket.org/me_ydv_5/octave/src/default/scripts/miscellaneous/weboptions.m&quot;&gt;Here&lt;/a&gt; is what I’ve implemented for this. It almost acts like the weboptions in Matlab with subtle differences. For example, when you call the following, it will show the answer that follows:&lt;/p&gt;
&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;    d = weboptions

      &amp;lt;object weboptions&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;MATLAB shows the values of the fields instead. For that I’ve created a method &lt;code class=&quot;highlighter-rouge&quot;&gt;values&lt;/code&gt; so that when you call &lt;code class=&quot;highlighter-rouge&quot;&gt;d.values&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;values(d)&lt;/code&gt;, you get to see all the values that are set for the object. There are a few problems which will most probably get rectified as me and Kai have another meeting on IRC. Basically, I’ll need to find a way to represent cell string in it’s input form, i.e, something like&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; ans =   {&quot;foo&quot;, &quot;bar&quot;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and not&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ans =
    {
        [1,1] = &quot;foo&quot;
        [1,2] = &quot;bar&quot;
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;You can set values for the various fields and members in the object by calling &lt;code class=&quot;highlighter-rouge&quot;&gt;d.field_name = your_desired_value;&lt;/code&gt;. This will do as desired. Some of the fields are currently for the MATLAB compatiblity and will be dealt with later, like &lt;code class=&quot;highlighter-rouge&quot;&gt;ContentReader&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;MediaType&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;CertificateFilename&lt;/code&gt;, etc.&lt;/p&gt;

&lt;p&gt;Oh and kindly strip your latest commit on &lt;code class=&quot;highlighter-rouge&quot;&gt;ocs&lt;/code&gt; (a merge commit) in your local repo, else it’ll create a new head. Sorry about that!&lt;/p&gt;

&lt;p&gt;Wrapping up for now! Apologies for such a long post.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&quot;https://bitbucket.org/me_ydv_5/octave/commits/branch/ocs&quot;&gt;Link&lt;/a&gt; to BitBucket repo.&lt;/p&gt;
</description>
	        <pubDate>Sun, 01 Jul 2018 22:01:00 +0530</pubDate>
	        <link>http://localhost:4000/gsoc2018/week11</link>
	        <guid isPermaLink="true">http://localhost:4000/gsoc2018/week11</guid>
	        
	        
	        <category>jekyll</category>
	        
	        <category>update</category>
	        
	      </item>
	    
    
    	
	      <item>
	        <title>Week 9 &amp; 10</title>
	        <description>&lt;p&gt;&lt;strong&gt;UPDATE:&lt;/strong&gt; I am more than happy to announce that I’ve been able to upload the images on to the wiki server!! The problem was not in &lt;code class=&quot;highlighter-rouge&quot;&gt;form_data_post&lt;/code&gt; but in &lt;a href=&quot;https://bitbucket.org/me_ydv_5/octave/src/59d3d9c4af257ca141e60420e9ba3c8ab32af0af/liboctave/util/url-transfer.cc#lines-663&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;http_post&lt;/code&gt;&lt;/a&gt; (in my version of Octave’s repository). There were two faults:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I was calling &lt;code class=&quot;highlighter-rouge&quot;&gt;http_action&lt;/code&gt; which then used to call &lt;code class=&quot;highlighter-rouge&quot;&gt;http_post&lt;/code&gt; inturn which then POSTed the data, despite the fact that there was no &lt;code class=&quot;highlighter-rouge&quot;&gt;POSTFIELD&lt;/code&gt; or POSTable data with me, it was &lt;code class=&quot;highlighter-rouge&quot;&gt;FORM&lt;/code&gt; submission instead. I’ve now added the &lt;code class=&quot;highlighter-rouge&quot;&gt;perform()&lt;/code&gt; function in the &lt;code class=&quot;highlighter-rouge&quot;&gt;form_data_post&lt;/code&gt; itself so that I won’t need to interact with the former.&lt;/li&gt;
  &lt;li&gt;I had set the &lt;a href=&quot;https://bitbucket.org/me_ydv_5/octave/src/59d3d9c4af257ca141e60420e9ba3c8ab32af0af/liboctave/util/url-transfer.cc#lines-671&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Content-Length&lt;/code&gt;&lt;/a&gt; parameter to get from the length of POSTFIELDS, which isn’t needed as of now.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Nevertheless, I’m pumped up again for furthering my work!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;There has been some problem in completing the &lt;code class=&quot;highlighter-rouge&quot;&gt;upload_to_wiki&lt;/code&gt; script. Unfortunately, I’m unable to send the images on to the servers. Other than that, everything is working fine. I’ve been trying to do the same since the past week, but still no success, even after tracking down the cURL’s source code.&lt;/p&gt;

&lt;p&gt;Basically we need to have a linked list of pointers to the information that we want to send as a form data. I tried to traverse that (It is native to cURL and unseen for the end user). Everything looks fine there. The only bottleneck that I can observe for now is, the &lt;a href=&quot;https://bitbucket.org/me_ydv_5/octave/src/59d3d9c4af257ca141e60420e9ba3c8ab32af0af/liboctave/util/url-transfer.cc#lines-710&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;form_data_post&lt;/code&gt;&lt;/a&gt; function is not working as desired. I’ve tried all other alternatives to check where my code is not responding as per standards. But I think only the above function must have problem.&lt;/p&gt;

&lt;p&gt;I also discussed this issue with the mentors and other people at IRC channel. However, there’s one more thing to it. The functionality that I’m currently using (&lt;a href=&quot;https://curl.haxx.se/libcurl/c/CURLOPT_HTTPPOST.html&quot;&gt;CURLOPT_HTTPPOST&lt;/a&gt;) is deprecated now from cURL version 7.56 and instead MIME API is being used. (See &lt;a href=&quot;https://github.com/curl/curl/pull/1839&quot;&gt;this&lt;/a&gt; for more.) I asked Kai about this and he too agreed on the fact that I shuold be keeping backwards compatibilty, but then jwe and andy suggested me to use the latter funcitonality with MIME api and then make the feature available only to those who have cURL 7.56+. I’ll ask the mentor once again if either the problem gets solved for now and then I change it to MIME API once the work gets over, or I should instead do it now only.&lt;/p&gt;

&lt;p&gt;Other than that, I will start implementing the RESTful services from now on, the other half part of the project. So, we’ll see how much of these functions that I’ve implemented so far get reused.&lt;/p&gt;

&lt;p&gt;Until then! :-)&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&quot;https://bitbucket.org/me_ydv_5/octave/commits/branch/ocs&quot;&gt;Link&lt;/a&gt; to BitBucket repo.&lt;/p&gt;
</description>
	        <pubDate>Sat, 23 Jun 2018 18:08:00 +0530</pubDate>
	        <link>http://localhost:4000/gsoc2018/week9-10</link>
	        <guid isPermaLink="true">http://localhost:4000/gsoc2018/week9-10</guid>
	        
	        
	        <category>jekyll</category>
	        
	        <category>update</category>
	        
	      </item>
	    
    
    	
	      <item>
	        <title>Week 8</title>
	        <description>&lt;p&gt;Hi! Now that my exams are over, I am back on the track. First evaluation will take place this week. I will continue my work from the last task, i.e, &lt;code class=&quot;highlighter-rouge&quot;&gt;wiki_login.m&lt;/code&gt;, to complete its implementation and then use it in &lt;code class=&quot;highlighter-rouge&quot;&gt;publish_to_wiki&lt;/code&gt; function that will help us upload the wiki to user’s online wiki. After that I plant to implement the RESTful services part of the project, which has &lt;code class=&quot;highlighter-rouge&quot;&gt;weboptions&lt;/code&gt; function lined up at first.&lt;/p&gt;

&lt;p&gt;I’ll update this blog with any subsequent progresses.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&quot;https://bitbucket.org/me_ydv_5/octave/commits/branch/ocs&quot;&gt;Link&lt;/a&gt; to BitBucket repo.&lt;/p&gt;
</description>
	        <pubDate>Mon, 11 Jun 2018 20:45:00 +0530</pubDate>
	        <link>http://localhost:4000/gsoc2018/week8</link>
	        <guid isPermaLink="true">http://localhost:4000/gsoc2018/week8</guid>
	        
	        
	        <category>jekyll</category>
	        
	        <category>update</category>
	        
	      </item>
	    
    
    	
	      <item>
	        <title>Week 6 &amp; 7</title>
	        <description>&lt;p&gt;As I’ve already completed my first evaluation work and got it reviewed the same from mentor, I won’t be doing much work in these two weeks due to my end semester exams. However, I’ll be continuing my post from week 8, positively.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&quot;https://bitbucket.org/me_ydv_5/octave/commits/branch/ocs&quot;&gt;Link&lt;/a&gt; to BitBucket repo.&lt;/p&gt;
</description>
	        <pubDate>Tue, 29 May 2018 22:56:00 +0530</pubDate>
	        <link>http://localhost:4000/gsoc2018/week6-7</link>
	        <guid isPermaLink="true">http://localhost:4000/gsoc2018/week6-7</guid>
	        
	        
	        <category>jekyll</category>
	        
	        <category>update</category>
	        
	      </item>
	    
    
  </channel>
</rss>
